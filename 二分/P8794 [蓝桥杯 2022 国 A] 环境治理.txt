看下数据Q最大有2的31次方，所以肯定要用二分答案
先定义4个地图，分别是初始地图（第一个输入），最小地图（第二个输入），当前地图（二分的时候使用的），floyd地图(二分求最短路径时用的）
先将给定的n座城市转化为2*n天
left=0，right=2*n（虽然我代码实现的时候略有区别）
二分时，枚举中间的天数，处理来得到当前地图，再根据当前地图和Floyd算法求出最短路径
依次判断即可，直到二分结束


#include <bits/stdc++.h>
using namespace std;
int d[5001][5001];//起始地图 
int amp[500][500];//当前地图 
int limit[500][500];//最小地图 
int floyd[500][500];//最短路径 
int main()
{
	int n,Q,ans=-1;
	cin>>n>>Q;
	int sum=0;
	for(int i=0;i<n;i++)//地图 
	{
		for(int j=0;j<n;j++)
		{
			cin>>d[i][j];
			amp[i][j]=d[i][j];
		}
	}
	for(int i=0;i<n;i++)//最小地图 
	{
		for(int j=0;j<n;j++)
		{
			cin>>limit[i][j];
		}
	}
	int middle=n-1;
	int left=0,right=2*n-1;
	while(left<=right) 
	{
		sum=0;
		int i=middle%n;
		if(middle>n-1)
		{
			for(int j=0;j<n;j++)
		 {
			for(int k=0;k<n;k++)
			{
				amp[j][k]--;
			}
		 }
		}
		for(int j=0;j<=i;j++)
		{
			for(int k=0;k<n;k++)
			{
				amp[j][k]--;
				if(amp[j][k]<limit[j][k])floyd[j][k]=limit[j][k];
				else floyd[j][k]=amp[j][k];
			}
		}
		for(int ii=0;ii<n;ii++)//floyd算法 
	    {
			for(int j=0;j<n;j++)
			{
				 for(int k=0;k<n;k++)
				{
					floyd[j][k]=min(floyd[j][k],floyd[j][ii]+floyd[ii][k]);
				}
		}
	    }
		for(int ii=0;ii<n;ii++)
		{
			for(int j=0;j<n;j++)
			
			{
				sum+=floyd[ii][j];
			}
		}
		if(sum>Q)left=middle+1;
		else ans=middle,right=middle-1;
		middle=(left+right)/2;
		for(int ii=0;ii<n;ii++)
		{
			for(int j=0;j<n;j++)
			{
				amp[ii][j]=d[i][j];
			}
		} 
	}
	cout<<ans;
}
