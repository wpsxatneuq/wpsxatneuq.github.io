#include<iostream>                                                               其实还可以用哈希表来降低空间消耗
#include<cmath>
using namespace std;
int n,k;
int a[1000005];
struct p
{
	int x=0,y=0;
};
p q[1000005];
void getmax()
{
	int head=0,tail=0;
	for(int i=1;i<k;i++)
	{
		while(head<=tail&&q[tail].x<a[i])
		{
			tail--;
		}
		tail++;
		q[tail].x=a[i];
		q[tail].y=i;
	}
	for(int i=k;i<=n;i++)
	{
		while(head<=tail&&q[tail].x<a[i])
		{
			tail--;
		}
		tail++;
		q[tail].x=a[i];
		q[tail].y=i;
		while(q[head].y<(i-k+1))
		{
			head++;
		}
		cout<< q[head].x<<' ';
	}
	cout<<endl;
}
void getmin()
{
	int head=0,tail=0;
	for(int i=1;i<k;i++)
	{
		while(head<=tail&&q[tail].x>a[i])
		{
			tail--;
		}
		tail++;
		q[tail].x=a[i];
		q[tail].y=i;
	}
	for(int i=k;i<=n;i++)
	{
		while(head<=tail&&q[tail].x>a[i])
		{
			tail--;
		}
		tail++;
		q[tail].x=a[i];
		q[tail].y=i;
		while(q[head].y<(i-k+1))
		{
			head++;
		}
		cout<<q[head].x<<' ';
	}
	cout<<endl;
}
int main()
{
    cin>>n>>k;
    for(int i=1;i<=n;i++)
    {
    	cin>>a[i];
	}
	getmin();
	getmax();
}





#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#define maxn 1000100
using namespace std;
int q[maxn], a[maxn];
int n, k;

void getmin() {  // 得到这个队列里的最小值，直接找到最后的就行了
  int head = 0, tail = 0;
  for (int i = 1; i < k; i++) {
    while (head <= tail && a[q[tail]] >= a[i]) tail--;
    q[++tail] = i;
  }
  for (int i = k; i <= n; i++) {
    while (head <= tail && a[q[tail]] >= a[i]) tail--;
    q[++tail] = i;
    while (q[head] <= i - k) head++;
    printf("%d ", a[q[head]]);
  }
}

void getmax() {  // 和上面同理
  int head = 0, tail = 0;
  for (int i = 1; i < k; i++) {
    while (head <= tail && a[q[tail]] <= a[i]) tail--;
    q[++tail] = i;
  }
  for (int i = k; i <= n; i++) {
    while (head <= tail && a[q[tail]] <= a[i]) tail--;
    q[++tail] = i;
    while (q[head] <= i - k) head++;
    printf("%d ", a[q[head]]);
  }
}

int main() {
  scanf("%d%d", &n, &k);
  for (int i = 1; i <= n; i++) scanf("%d", &a[i]);
  getmin();
  printf("\n");
  getmax();
  printf("\n");
  return 0;
}

