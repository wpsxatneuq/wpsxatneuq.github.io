所谓有依赖的背包就是，当a物体被买时b物体才能被买，我们称b依赖于a或b为a的附件。
a有n个附件时，显然我们一共有pow（2，n）+1种策略，且这些策略是互斥的，我们可以把他们放在同一个组中，看成分组背包问题。


分组背包问题就是有多个物品组，一个组中的物体只能选一个。
#include<bits/stdc++.h>
using namespace std;
struct s
{
	int X,Y;
}b;
int n,m;
int d[61][32001];
int main()
{
	cin>>n>>m;
	int i,ii=0,j;
	int c[100];
	vector<s>v[100];
	for(i=1,j=1;i<=m;i++,j++)
	{
		int x,y,z;
		cin>>x>>y>>z;
		if(z==0)
		{
			ii++;
			c[j]=ii;
			b.X=x;
			b.Y=y*x;
			v[i].push_back(b);
		}
		else
		{
			c[j]=z;
			b.X=x+v[c[z]][0].X;
			b.Y=y*x+v[c[z]][0].Y; 
			v[c[z]].push_back(b);
			i--;
			m--;
		}
	}
	for(i=1;i<=m;i++)
	{
		if(v[i].size()==3)
		{
			b.X=v[i][1].X+v[i][2].X-v[i][0].X;
			b.Y=v[i][1].Y+v[i][2].Y-v[i][0].Y;
			v[i].push_back(b);
		}
	}
	for(i=1;i<=m;i++)
	{
		for(int j=1;j<=n;j++)
		{
			for(int k=0;k<v[i].size();k++)
			{
				if(j<v[i][k].X)
				{
					d[i][j]=max(d[i][j],d[i-1][j]);
				}
				else
				{
					d[i][j]=max(d[i][j],d[i-1][j-v[i][k].X]+v[i][k].Y);
					d[i][j]=max(d[i][j],d[i-1][j]);
				}
			}
		}
	}
	cout<<d[m][n];
	return 0;
 } 
